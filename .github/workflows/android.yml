name: android
on:
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.system }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # - system: "android-31;default;arm64-v8a"
          # - system: "android-31;default;x86_64"
          - system: "android-34;default;x86_64"
    steps:
      - name: Install JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: 8

      - name: java 8
        id: java8
        # run: echo "::set-output name=JAVA_HOME::${JAVA_HOME}"
        run: echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_OUTPUT

      # - name: set up JDK 11
      #   uses: actions/setup-java@v2
      #   with:
      #     distribution: 'zulu'
      #     java-version: '11'

      - name: Debug
        run: |
          $ANDROID_HOME/tools/bin/sdkmanager --list
        env:
          JAVA_HOME: ${{ steps.java8.outputs.JAVA_HOME }}
      - name: List device
        run: |
          $ANDROID_HOME/tools/bin/avdmanager list device
        env:
          JAVA_HOME: ${{ steps.java8.outputs.JAVA_HOME }}
      - name: Create emulator
        run: |
          echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install "system-images;${{ matrix.system }}"
          echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n emu -k "system-images;${{ matrix.system }}" --force
        env:
          JAVA_HOME: ${{ steps.java8.outputs.JAVA_HOME }}
      - name: List emulator
        run: |
          $ANDROID_HOME/emulator/emulator -list-avds
        env:
          JAVA_HOME: ${{ steps.java8.outputs.JAVA_HOME }}

      - name: root avd
        env:
          JAVA_HOME: ${{ steps.java8.outputs.JAVA_HOME }}
        run: |
          set -x
          export PATH="$PATH:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator"
          git clone --depth 1 https://gitlab.com/newbit/rootAVD
          cd rootAVD
          
          ./rootAVD.sh
          ./rootAVD.sh ListAllAVDs
          ./rootAVD.sh InstallApps
          
          ./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img
          ./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img FAKEBOOTIMG
          ./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img DEBUG PATCHFSTAB GetUSBHPmodZ
          ./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img restore
          ./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img InstallKernelModules
          ./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img InstallPrebuiltKernelModules
          ./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG
          ./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img AddRCscripts


      - name: Start emulator
        timeout-minutes: 60
        run: |
          echo "Starting emulator"
          nohup $ANDROID_HOME/emulator/emulator -avd emu -no-snapshot > /dev/null 2>&1 &
          echo "Emulator starting"
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done; input keyevent 82'
          echo "Emulator started"
          $ANDROID_HOME/platform-tools/adb devices
          $ANDROID_HOME/platform-tools/adb shell getprop ro.product.cpu.abi
          set -x
          $ANDROID_HOME/platform-tools/adb shell id
          $ANDROID_HOME/platform-tools/adb shell su -c 'id' || true
        env:
          JAVA_HOME: ${{ steps.java8.outputs.JAVA_HOME }}
