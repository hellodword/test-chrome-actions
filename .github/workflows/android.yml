name: android
on:
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.system }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # - system: "android-31;default;arm64-v8a"
          # - system: "android-31;default;x86_64"
          # - system: "android-34;default;x86_64"
          - system: "android-33;google_apis;x86_64"
    steps:
      - name: Install JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: 8

      - name: java 8
        id: java8
        # run: echo "::set-output name=JAVA_HOME::${JAVA_HOME}"
        run: echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_OUTPUT

      - name: run docker
        run: |
          brew install docker
          colima start
          docker run --rm -d --name cloudflared --network host cloudflare/cloudflared tunnel --url http://127.0.0.1:8000
          docker run --rm -d --name http -p 8000:8000 python:latest python -m http.server -d /tmp

      - name: show trycloudflared
        id: cloudflare
        run: |
          docker logs cloudflared 2>&1 | grep -oP 'https://[^\n \./]+\.trycloudflare.com'
          sleep 3
          CLOUDFLARE="$(docker logs cloudflared 2>&1 | grep -oP 'https://[^\n \./]+\.trycloudflare.com')"
          echo "CLOUDFLARE=$CLOUDFLARE" >> $GITHUB_OUTPUT

      # - name: set up JDK 11
      #   uses: actions/setup-java@v2
      #   with:
      #     distribution: 'zulu'
      #     java-version: '11'

      - name: Debug
        run: |
          $ANDROID_HOME/tools/bin/sdkmanager --list
        env:
          JAVA_HOME: ${{ steps.java8.outputs.JAVA_HOME }}
      - name: List device
        run: |
          $ANDROID_HOME/tools/bin/avdmanager list device
        env:
          JAVA_HOME: ${{ steps.java8.outputs.JAVA_HOME }}
      - name: Create emulator
        run: |
          echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install "system-images;${{ matrix.system }}"
          echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n emu -k "system-images;${{ matrix.system }}" --force
        env:
          JAVA_HOME: ${{ steps.java8.outputs.JAVA_HOME }}
      - name: List emulator
        run: |
          $ANDROID_HOME/emulator/emulator -list-avds
        env:
          JAVA_HOME: ${{ steps.java8.outputs.JAVA_HOME }}
      - name: Debug
        run: |
          find $ANDROID_HOME | grep android-33
        env:
          JAVA_HOME: ${{ steps.java8.outputs.JAVA_HOME }}
      # - name: root avd
      #   env:
      #     JAVA_HOME: ${{ steps.java8.outputs.JAVA_HOME }}
      #   run: |
      #     set -x
      #     export PATH="$PATH:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator"
      #     git clone --depth 1 https://gitlab.com/newbit/rootAVD
      #     cd rootAVD
          
      #     ./rootAVD.sh /Users/runner/Library/Android/sdk/system-images/android-33/default/x86_64/ramdisk.img

      - name: Start emulator
        timeout-minutes: 60
        run: |
          set -x
          echo "Starting emulator"
          nohup $ANDROID_HOME/emulator/emulator -avd emu -no-snapshot > /dev/null 2>&1 &
          echo "Emulator starting"
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done; input keyevent 82'
          echo "Emulator started"
          $ANDROID_HOME/platform-tools/adb devices
          $ANDROID_HOME/platform-tools/adb shell getprop ro.product.cpu.abi
          $ANDROID_HOME/platform-tools/adb shell id
          # $ANDROID_HOME/platform-tools/adb shell su -c 'id' || true
          $ANDROID_HOME/platform-tools/adb shell cmd package list packages
          $ANDROID_HOME/platform-tools/adb shell netcfg || true
          $ANDROID_HOME/platform-tools/adb exec-out screencap -p > test-1.png
          $ANDROID_HOME/platform-tools/adb shell am start -a android.intent.action.VIEW -d ${{ steps.cloudflare.outputs.CLOUDFLARE }}/actions
          sleep 3
          $ANDROID_HOME/platform-tools/adb exec-out screencap -p > test-2.png
          sleep 3
          $ANDROID_HOME/platform-tools/adb exec-out screencap -p > test-3.png
          sleep 3
          $ANDROID_HOME/platform-tools/adb exec-out screencap -p > test-4.png
          sleep 3
          $ANDROID_HOME/platform-tools/adb exec-out screencap -p > test-5.png
        env:
          JAVA_HOME: ${{ steps.java8.outputs.JAVA_HOME }}
      - uses: actions/upload-artifact@v4
        with:
          name: test
          path: test-*.png

      - name: show log
        run: |
          docker logs http
